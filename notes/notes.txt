svc host: 
pid of 1 = spawned by services
otherwise = malware 

build script to check services for malware? 



Analyzing network packets coming from client to server; if packet is of a certain type, save to output file in a 

if packet is not coming from server ip:
	analyze 
else:
	ignore




generates a report on all user and sends to email address:

1. hostname
2. uname -a  [outputs system specifications]
3. uptime [shows how long system has been running]
4. sar [gives detailed rundown on system statistics]
5.  top -b [displays most cpu-intensive processes]
6. netstat [shows current network statistics and info]
7. 




'have you tried turning it off and on again' - a remote script which will do all of the tasks users never do but which solve almost all of the problems. First it will log information about who's logged in, how long they've been 


1. Asks user to input their name and explain the issue 

2. Runs the following logging commands:

	hostname

	uname -a  [outputs system specifications]

	w | grep startx #[shows all logged on users and the processes they're running]

	uptime #[displays how long system has been on]

	sar #[gives detailed rundown on system statistics]

	tcpdump -i any -c5 -nn host ip.address.here.lol #[captures and displays packets to and from specified host]

	journalctl -p 4 --since "2 hours ago" #[shows warning, error, critical, alert and emergency alerts from the last two hours]

3. Alerts user that their computer will be rebooted in 1 minute (gives option to delay / cancel) and that following this they will be contacted by IT support after logs are reviewed



Two VMs - one server, one client. I create a script which can SSH into the client and perform a number of 



LOGGING & REBOOT SCRIPT - OffAndOn.sh


** MENU
	echo "Please Enter Your Name"

	read name 

	echo "Welcome, $name, Please state the issue and what you were doing just before it occured
	
	read issue
	
	echo "Please wait while report is generated"
**


hostname

uname -a  #[outputs system specifications]

w | grep startx #[shows all logged on users and the processes they'sre running]

uptime #[displays how long system has been on]

sar #[gives detailed rundown on system statistics]

tcpdump -i any -c5 -nn host ip.address.here.lol #[captures and displays packets to and from specified host]

journalctl -p 4 --since "2 hours ago" #[shows warning, error, critical, alert and emergency alerts from the last two hours]


** MENU pt2

	echo "Your computer will be rebooted in 1 minute"

	if (user says reboot now)
	reboot -r +1
	else 
	exit 0
**




STARTUP SCRIPT - startup.sh

1. nano startup.sh

if uptime == less than 1 2 minutes:

**MENU

	echo "You will be contacted within the next 48 hours by tech support to assist with 	your concern."


	[[run the logging script again]]

**

else:

rm startup.sh
crontab -r


2. chmod +x startup.sh


3. crontab -e
@reboot  /home/user/startup.sh









https://opensource.com/article/18/10/introduction-tcpdump

https://www.reddit.com/r/PowerShell/comments/t6w9ak/i_wrote_the_motherofall_onboarding_scripts_and/

https://www.reddit.com/r/sysadmin/comments/93klzj/bash_scripts_for_onoffboarding_employees/


https://www.baeldung.com/linux/shell-script-simple-select-menu

https://opensource.com/article/20/1/wireshark-linux-tshark

https://stackoverflow.com/questions/13928116/write-a-shell-script-to-ssh-to-a-remote-machine-and-execute-commands

