

# SENDS OUTPUT TO LOG
exec 2>&1>& ticket.log


function menu() {

	echo -ne "\n\nIT SUPPORT TICKET\n
	PLEASE ENTER YOUR EMPLOYEE ID NUMBER: "
	
	read emp_ID
	
	echo -e "\n\nWHAT IS YOUR CURRENT ISSUE?\n\n
	$(colour_blue '   1 ') Network Issues
	$(colour_blue '   2 ') Application Crashing / Won't Open
	$(colour_blue '   3 ') Everything is F*@$!d
	$(colour_blue '   0 ') Exit
	$(colour_blue '\n\n   Choose an Option: ') "

        read menu_option

        case $menu_option in 
                1) 	
			network_issues
			menu 
			;;
                2) 	
			crashing 
			menu 
			;;
		3) 
			on_fire
			menu
			;;
		0)	
			exit 0
			;;

                *)	
			input_error  
			menu ;;

}


function reboot_system() {

	echo -ne "\n\nSYSTEM REBOOT IN PROGRESS\n\n
	The system needs to be restarted in order to complete your support request. Would you like to reboot now or schedule it for a later date (Rebooting is mandatory)?
	$(colour_blue '   1 ') Reboot Now
	$(colour_blue '   2 ') Reschedule Reboot
	$(colour_blue '\n\n   Choose an Option: ') "
	
	read reboot_option

        case $reboot_option in 
                1) 	
			shutdown -r +1
			clear
			echo -e "\n\nSystem will reboot in 1 minute"
			exit 0
			;;
                2) 	
			schedule_reboot
			;;


function schedule_reboot() {
	echo -ne "\n\nWhen would you like to schedule your system reboot?\n\n
	$(colour_blue '   1 ') In 1 Hour
	$(colour_blue '   2 ') EOD (5pm)
	$(colour_blue '   3 ') Tonight (8pm)
	$(colour_blue '   4 ') Tomorrow morning (6am) 
	$(colour_blue '\n\n   Choose an Option: ') "
	
	read reboot_time

        case $reboot_time in 
                1) 	
			shutdown -r +60
			clear
			echo -e "\n\nSystem will reboot in 1 hour"
			exit 0
			;;
                2) 	
			shutdown -r 17:00
			clear
			echo -e "\n\nSystem will reboot at 5pm"
			exit 0
			;;
		3) 
			shutdown -r 20:00
			clear
			echo -e "\n\nSystem will reboot tonight at 8pm"
			exit 0
			;;
		4) 
			shutdown -r 06:00
			clear
			echo -e "\n\nSystem will reboot tomorrow morning at 6am"
			exit 0
			;;
}


function network_issues() {
	date
	hostname
	whoami
	uname -a
	ip a
	nmap -Pn -sV 192.168.208.148
	ping -c 4 google.com
	ss -s
	perf test
}


function crashing() {
	date
	hostname
	whoami
	uname -a
	ip a
	ping -c 4 google.com
	uptime
	iostat 	
	nmap -Pn -sV 192.168.208.148
	systemctl list-units --type=service --all --no-pager
	top 
	free -m
	df -h	
	lshw
	perf test -v
	journalctl -p 0..3 
	dmesg -l err,crit,alert,emerg
	tail /var/log/syslog
}


function on_fire() {
	crashing
	network_issues
}


function input_error() {

	echo -e "$(colour_red '\n\n---------------ERROR-------------')" 
        echo -e "$(colour_red 'Invalid Entry - Please Try Again')"
	echo -e "$(colour_red '------------------------------\n\n')"
        sleep 3
	clear

}


# --------------------------------------------------------
# ** VARIABLES & FUNCTIONS: COLOURS FOR MENU OPTIONS, ERROR MESSAGES**

# red: VARIABLE WHICH DEFINES THE COLOUR FOR ERROR MESSAGES
# [\e[31m]: REPRESENTS ANSI ESCAPE SEQUENCE FOR SETTING TEXT COLOUR TO RED
red='\e[31m'

# blue: VARIABLE WHICH DEFINES THE COLOUR FOR MENU MESSAGES
# [\e[34m]: REPRESENTS ANSI ESCAPE SEQUENCE FOR SETTING TEXT COLOUR TO BLUE
blue='\e[34m'

# clear: VARIABLE WHICH DEFINES DEFAULT TEXT COLOUR
# [\e[0m]: REPRESENTS ANSI ESCAPE SEQUENCE FOR RESETTING TEXT COLOUR TO DEFAULT
clear='\e[0m'


# colour_red: FUNCTION WHICH SETS THE COLOUR FOR TEXT SPECIFIED TO RED, THEN RESETS TEXT COLOUR TO DEFAULT
#
function colour_red() {

        echo -ne $red$1$clear

}


# colour_blue: FUNCTION WHICH SETS THE COLOUR FOR TEXT SPECIFIED TO BLUE, THEN RESETS TEXT COLOUR TO DEFAULT
#
function colour_blue() {

        echo -ne $blue$1$clear

}
