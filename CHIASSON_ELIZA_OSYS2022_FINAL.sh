#!/bin/bash


# OSYS2022 -- FINAL PROJECT
# SCRIPT NAME: systest.sh 
# SUBMISSION FILE NAME: CHIASSON_ELIZA_OSYS2022_FINAL.txt
# AUTHOR: ELIZA CHIASSON (W0297738)
#
# DESCRIPTION: BASH SCRIPT WHICH LOGS SYSTEM STATS ON USER CLIENT TO A FORMATTED LOG FILE
# AND SENDS IT VIA FILE TRANSFER TO FOLDER ON TECH SUPPORT CLIENT (INTENDED TO BE RUN VIA 
# SSH FROM TECH SUPPORT CLIENT TO USER CLIENT). 
#
# NOTE: THIS SCRIPT REQUIRES INSTALLATION OF THE 'sysstat' PERFORMANCE MONITORING TOOL, 
# WHICH CAN BE INSTALLED BY RUNNING THE FOLLOWING COMMAND (ON UBUNTU SYSTEMS): 
# [sudo apt-get install sysstat]
#
# CREATED: 04/10/2024
# REVISED: 04/14/2024


# FUNCTION: log_info TAKES INPUT ON TECH SUPPORT EMPLOYEE ID # AND DESCRIPTION OF CLIENT ISSUE
# AND NOTIFIES USER OF TESTS BEING RUN, LOGS BEING SENT. PROMPTS USER TO ENTER PASSWORD FOR scp 
# FILE TRANSFER WHICH WILL OCCUR AFTER TESTS ARE RUN 
#
function log_info() {

    # [ log_date=$()] : VARIABLE WHICH PRINTS OUTPUT OF COMMAND THAT DEFINES IT
    # [ date "+%m%d%y" ] : COMMAND WHICH PRINTS CURRENT DATE FORMATTED AS MMDDYY
    log_date=$(date "+%m%d%y") 

    # [ echo ] : COMMAND WHICH PRINTS TEXT TO TERMINAL  
    # [ -e ] : PARAMETER OF echo WHICH ALLOWS USE OF ESCAPE CODES TO FORMAT OUTPUT
    # [ \n ] : ESCAPE CODE WHICH INSERTS A LINE BREAK IN OUTPUT 
    # [ ${log_date} ] : INSERTS log_date VARIABLE TO PRINT CURRENT DATE 
	echo -e "\n\nIT SUPPORT LOG: ${log_date}\n\n"
	echo -e "Please enter your ID number: "

    # [ read ] : COMMAND WHICH ASKS FOR USER INPUT AND STORES IT IN A VARIABLE
    # [tech_ID ] : VARIABLE TO WHICH USER INPUT IS STORED 
	read tech_ID
	echo -e "\n"
	echo -e "Please enter a short description of the issue: "
	read issue_desc
	echo -e "\n"
	echo -e "Tests are being run ... please wait"

    # [ sleep ] : COMMAND WHICH PAUSES SCRIPT FOR SPECIFIED AMOUNT OF TIME 
	sleep 4

    # [ $(hostname) ] : COMMAND WHICH PRINTS HOSTNAME OF SYSTEM, FORMATTED FOR USE INSIDE echo COMMAND
	echo -e "Test log will be sent to home/techsupport/support_logs/$(hostname) on your device. Please enter your password below:\n"

}


# FUNCTION: stats FORMATS AND OUTPUTS VARIOUS STATS ON SYSTEM FOR TROUBLESHOOTING PURPOSES
#
function stats() {

    # [ "+%A %B %d %T %y" ] : PARAMETERS WHICH SPECIFY OUTPUT OF DATE COMMAND SHOULD PRINT DAY OF THE WEEK, MONTH, DAY OF THE MONTH, AND CURRENT TIME
    # [ -I ] : PARAMETER OF THE hostname COMMAND WHICH SPECIFIES OUTPUT AS IP ADDRESS OF NETWORK CONNECTION 
    # [ iostat ] : COMMAND WHICH PRINTS STATS ON CPU AVERAGE UTILIZATION AND AMOUNT AND NUMBER OF READ/WRITE TO DEVICES
    # [ -m ] : PARAMETER OF iostat COMMAND WHICH SPECIFIES OUTPUT SHOULD BE IN MEGABYTES
    # [uptime ] : COMMAND WHICH PRINTS LENGTH OF TIME SINCE SYSTEM BOOT
    # [ ps ] : COMMAND WHICH DISPLAYS INFO ABOUT PROCESSES RUNNING ON SYSTEM
    # [ aux ] : PARAMETER OF ps COMMAND WHICH DISPLAYS DETAILED LIST OF ALL PROCESSES RUNNING ON SYSTEM
    # [--sort -%mem]: PARAMETER of ps COMMAND WHICH SORTS LIST OF PROCESSES BY MEMORY USE
    # [ | head -6 ] : PIPED COMMAND WHICH TAKES LIST GENERATED BY ps COMMAND AND OUTPUTS TOP 5 PROCESSES FROM IT
    # [ ip ] : COMMAND WHICH PRINTS SYSTEM'S NETWORKING INFORMATION
    # [ a ] : PARAMETER OF ip COMMAND WHICH SPECIFIES OUTPUT SHOULD INCLUDE ALL NETWORK INTERFACES
    # [ r ] : PARAMETER OF ip COMMAND WHICH PRINTS SYSTEM ROUTING TABLE 
    # [ ping ] : COMMAND WHICH TESTS INTERNET CONNECTIVITY BY SENDING ICMP PACKETS TO SPECIFIED ADDRESS 
    # [ -c 4 ] : PARAMETER OF ping COMMAND WHICH SPECIFIES NUMBER OF PACKETS TO SEND 
    # [ ss ] : COMMAND WHICH OUTPUTS STATS ON NETWORK SOCKETS
    # [ -s ] : PARAMETER OF ss COMMAND WHICH SPECIFIES OUTPUT SHOULD BE SUMMARIZED
    # [ free ] : COMMAND WHICH OUTPUTS STATS ON TOTAL AND AVAILABLE MEMORY (RAM) ON SYSTEM 
    # [ -h ] : PARAMETER OF free COMMAND WHICH SPECIFIES OUTPUT SHOULD INCLUDE DATA UNITS
    # [ df ] : COMMAND WHICH OUTPUTS STATS ON TOTAL AND AVAILABLE DISK SPACE ON SYSTEM
    # [ -h ] : PARAMETER OF df COMMAND WHICH SPECIFIES OUTPUT SHOULD INCLUDE DATA UNITS
    # [ >> "/home/zaz/support_logs/ticket_${log_date}.log" ] : SPECIFIES OUTPUT OF ALL COMMANDS SHOULD BE SENT TO SPECIFIED FILE WITHIN SPECIFIED DIRECTORY

    echo -ne "\nDate: $(date "+%A %B %d %T %y")\nDevice Name: $(hostname)\nDevice IP Address: $(hostname -I)\nTech ID: ${tech_ID}\nIssue Description: ${issue_desc}\n\n\nCPU usage and I/O Stats:\n$(iostat -m )\n\nSystem uptime:\n $(uptime)\n\nTop 5 Processes Running:\n$(ps aux --sort -%mem | head -6)\n\nNetwork Interfaces:\n$(ip a)\n\nRouting Table:\n$(ip r)\n\nPing Attempt:\n$(ping -c 4 google.com)\n\nNetwork Socket Stats:\n$(ss -s)\n\nSystem Memory Stats:\n$(free -h)\n\nSystem Disk space:\n$(df -h)" >> "/home/zaz/support_logs/ticket_${log_date}.log"
	
}


# FUNCTION: reboot ASKS USER WHEN THEY WOULD LIKE TO REBOOT AND GIVES OPTION TO RESCHEDULE
#
function reboot() {
    # [ $colour_blue ] : VARIABLE WHICH SPECIFIES COLOUR OF TEXT OUTPUT AS BLUE
	echo -ne "\n\nSYSTEM REBOOT IN PROGRESS\n\nThe system needs to be restarted in order to complete your support request. Would you like to reboot now or schedule it for a later date (Rebooting is mandatory)?\n\n
	$(colour_blue '   1 ') Reboot Now
	$(colour_blue '   2 ') Reschedule Reboot
	$(colour_blue '\n\n   Choose an Option: ') "

    read reboot_option

    # [ case $reboot_option ] : STATEMENT WHICH CHECKS FOR USER INPUT DEFINED BY reboot_option VARIABLE AND PERFORMS SPECIFIED COMMANDS DEPENDING ON USER INPUT
    case $reboot_option in 
        1) 	
			echo -e "\nSystem will reboot immediately\n"

            # [ shutdown ] : COMMAND WHICH DIRECTS SYSTEM TO SHUT DOWN 
            # [ -r ] : PARAMETER OF shutdown COMMAND WHICH SPECIFIES SYSTEM SHOULD REBOOT
            # [ now ] : PARAMETER OF SHUTDOWN COMMAND WHICH SPECIFIES IT SHOULD BE EXECUTED IMMEDIATELY  
			shutdown -r now

            # [ clear ] : COMMAND WHICH CLEARS TERMINAL 
			clear

            # [ exit ] : COMMAND WHICH EXITS SCRIPT
            # [ 0 ] : PARAMETER OF exit COMMAND WHICH SPECIFIES TO EXIT WITH NO ERROR CODE
			exit 0
			;;
		2) 	
            # [ schedule_reboot ] : FUNCTION WHICH OFFERS OPTIONS TO RESCHEDULE REBOOT
			schedule_reboot
			;;
		*) 
            # [ input_error ] : FUNCTION WHICH RUNS WHEN USER INPUT DOESN'T MATCH 1 OR 2 
			input_error
            reboot
			;;
    # [ esac ] : STATEMENT TO CONCLUDE CASE STATEMENT 
    esac
}


# FUNCTION: schedule_reboot PROMPTS USER TO CHOOSE A TIME TO SCHEDULE A REBOOT FOR THE SYSTEM
function schedule_reboot() {
	echo -ne "\n\nWhen would you like to schedule your system reboot?\n\n
	$(colour_blue '   1 ') In 1 hour
	$(colour_blue '   2 ') EOD (5pm)
	$(colour_blue '   3 ') Tonight (8pm)
	$(colour_blue '   4 ') Tomorrow morning (6am) 
	$(colour_blue '\n\n   Choose an Option: ') "
	
	read reboot_time

    # [ case reboot_time ] : STATEMENT WHICH CHECKS FOR USER INPUT DEFINED BY reboot_time VARIABLE AND PERFORMS SPECIFIED COMMANDS DEPENDING ON USER INPUT
    case $reboot_time in 
	    1) 	
            # [ +60 ] : PARAMETER OF shutdown COMMAND WHICH SPECIFIES REBOOT SHOULD BE PERFORMED IN 60 MINUTES  
			shutdown -r +60
			clear
			echo -e "\n\nSystem will reboot in 1 hour"
			exit 0
			;;
        2) 
            # [ 17:00 ] : PARAMETER OF shutdown COMMAND WHICH SPECIFIES REBOOT SHOULD BE PERFORMED AT 5PM 
			shutdown -r 17:00
			clear
			echo -e "\n\nSystem will reboot at 5pm"
			exit 0
			;;
		3) 
            # [ 20:00 ] : PARAMETER OF shutdown COMMAND WHICH SPECIFIES REBOOT SHOULD BE PERFORMED AT 8PM
			shutdown -r 20:00
			clear
			echo -e "\n\nSystem will reboot tonight at 8pm"
			exit 0
			;;
		4) 
            # [ 06:00 ] : PARAMETER OF shutdown COMMAND WHICH SPECIFIES REBOOT SHOULD BE PERFORMED AT 6AM THE FOLLOWING DAY
			shutdown -r 06:00
			clear
			echo -e "\n\nSystem will reboot tomorrow morning at 6am"
			exit 0
			;;
		*) 
			input_error
            schedule_reboot
			;;
	esac
}


# FUNCTION input_error WHICH RUNS WHEN INCORRECT USER INPUT IS SENT. PRINTS TEXT TO TERMINAL SHOWING ERROR MESSAGE 
#
function input_error() {

    # [ $colour_red ] : VARIABLE WHICH SPECIFIES TEXT OUTPUT SHOULD BE COLOURED RED
	echo -e "$(colour_red '\n\n---------------ERROR-------------')" 
    echo -e "$(colour_red 'Invalid Entry - Please Try Again')"
	echo -e "$(colour_red '------------------------------\n\n')"
    sleep 3
	clear

}


# ** VARIABLES & FUNCTIONS: COLOURS FOR MENU OPTIONS, ERROR MESSAGES**

# [ red ] : VARIABLE WHICH DEFINES THE COLOUR FOR ERROR MESSAGES
# [ \e[31m ]: REPRESENTS ANSI ESCAPE SEQUENCE FOR SETTING TEXT COLOUR TO RED
red='\e[31m'

# [ blue] : VARIABLE WHICH DEFINES THE COLOUR FOR MENU MESSAGES
# [ \e[34m ] : REPRESENTS ANSI ESCAPE SEQUENCE FOR SETTING TEXT COLOUR TO BLUE
blue='\e[34m'

# [ clearcolour ]: VARIABLE WHICH DEFINES DEFAULT TEXT COLOUR
# [ \e[0m ]: REPRESENTS ANSI ESCAPE SEQUENCE FOR RESETTING TEXT COLOUR TO DEFAULT
clearcolour='\e[0m'


# FUNCTION: colour_red SETS THE COLOUR FOR TEXT SPECIFIED TO RED, THEN RESETS TEXT COLOUR TO DEFAULT
#
function colour_red() {
        echo -ne $red$1$clearcolour
}


# FUNCTION: colour_blue SETS THE COLOUR FOR TEXT SPECIFIED TO BLUE, THEN RESETS TEXT COLOUR TO DEFAULT
#
function colour_blue() {
        echo -ne $blue$1$clearcolour
}


# EXECUTES log_info AND stats FUNCTIONS IN SEQUENCE
log_info
stats 

# [ scp ] : COMMAND WHICH TRANSFERS OUTPUT LOG FROM USER CLIENT TO TECH SUPPORT CLIENT 
# [ ${log_date} ] :  VARIABLE WHICH PRINTS CURRENT DATE FORMATTED AS MMDDYY - IN THIS CASE ADDING IT TO THE FILE NAME
scp "/home/zaz/support_logs/ticket_${log_date}.log" techsupport@192.168.208.160:/home/techsupport/support_logs/OSYS2022-UB/

# EXECUTES reboot FUNCTION
reboot